#include <Evo.h>
#include <SoftwareSerial.h>

EVOX1 evo;
EvoBNO055 bno(I2C2);

EvoMotor driveMotor(M1, EV3MediumMotor, true);    
EvoMotor steerMotor(M2, EV3MediumMotor, true);

float x, y, z;
float heading;

const int TARGET_HEADING = 0;
const int DRIVE_DISTANCE = 72000;

const int MAX_STEER_ANGLE = 30;
const int CLAMP_RELEASE_THRESHOLD = 28;
const int MIN_STEER_SPEED = 1000;

const float Kp = 1.0;
const float Kd = 5.0;

float pError = 0;

float calculateHeadingError(float current, float target)
{
  float error = target - current;
  if (error > 180) error -= 360;
  if (error < -180) error += 360;
  return error;
}

void setup()
{
  evo.begin();
  bno.begin();
  driveMotor.begin();
  steerMotor.begin();

  steerMotor.resetAngle();
  driveMotor.resetAngle();

  evo.writeLineToDisplay("Heading Track 0Â°", 0, true, true);
  delay(1000);
}

void loop()
{
  driveMotor.resetAngle();  // Ensure the drive motor is reset

  bool isClamped = false;
  int clampedDirection = 0;
  float pError = 0;  // Previous error for derivative term

  while (driveMotor.getAngle() < DRIVE_DISTANCE)
  {
    // Get heading from IMU
    bno.getEuler(&x, &y, &z);
    heading = x;
    if (heading < 0) heading += 360;
    if (heading >= 360) heading -= 360;

    // Calculate heading error
    float error = calculateHeadingError(heading, TARGET_HEADING);
    float steerAngle = 0;

    // Clamping logic
    if (isClamped)
    {
      if (abs(error) < CLAMP_RELEASE_THRESHOLD)
      {
        isClamped = false;
        clampedDirection = 0;
        steerAngle = error;
      }
      else
      {
        steerAngle = (clampedDirection > 0) ? MAX_STEER_ANGLE : -MAX_STEER_ANGLE;
      }
    }
    else
    {
      if (abs(error) >= MAX_STEER_ANGLE)
      {
        isClamped = true;
        clampedDirection = (error > 0) ? 1 : -1;
        steerAngle = (clampedDirection > 0) ? MAX_STEER_ANGLE : -MAX_STEER_ANGLE;
      }
      else
      {
        steerAngle = error;
      }
    }

    // PD Control for steering speed
    float derivative = error - pError;
    int steerSpeed = (int)(Kp * steerAngle + Kd * derivative);

    // Clamp speed to prevent excessive rotation
    steerSpeed = constrain(steerSpeed, -2000, 2000);

    // Enforce minimum speed if steering is active
    if (steerSpeed != 0 && abs(steerSpeed) < MIN_STEER_SPEED)
    {
      steerSpeed = (steerSpeed > 0) ? MIN_STEER_SPEED : -MIN_STEER_SPEED;
    }

    // Run steering motor continuously based on calculated speed
    steerMotor.run(steerSpeed);

    // Drive forward
    driveMotor.run(-4000);  // Max forward speed

    // Display debug info
    evo.clearDisplay();
    evo.writeToDisplay("Heading:", 0, 0);
    evo.writeToDisplay((int)heading, 70, 0);
    evo.writeToDisplay("Error:", 0, 16);
    evo.writeToDisplay((int)error, 70, 16);
    evo.writeToDisplay("Steer Spd:", 0, 32);
    evo.writeToDisplay(steerSpeed, 80, 32);
    evo.writeToDisplay("Clamped:", 0, 48);
    evo.writeToDisplay(isClamped ? "YES" : "NO", 80, 48);
    evo.drawDisplay();

    // Save current error for next derivative calculation
    pError = error;

    delay(50);
  }

  // Stop motors after reaching target
  driveMotor.coast();
  steerMotor.coast();

  evo.clearDisplay();
  evo.writeLineToDisplay("Done Tracking", 0, true, true);
  while (true);
}
